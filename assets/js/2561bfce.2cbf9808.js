"use strict";(self.webpackChunkulinkcms_doc=self.webpackChunkulinkcms_doc||[]).push([[1919],{7145:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>h});var n=s(4848),i=s(8453);const r={sidebar_position:1},o="User Authentication",a={id:"Technology-Stack/User-Authentication",title:"User Authentication",description:"When a user attempts to log into the system, the provided password is securely transmitted to the backend server for validation. This process is designed to ensure that user credentials remain protected and that unauthorized access is prevented.",source:"@site/docs/05-Technology-Stack/01-User-Authentication.mdx",sourceDirName:"05-Technology-Stack",slug:"/Technology-Stack/User-Authentication",permalink:"/docs/Technology-Stack/User-Authentication",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"documentsSidebar",previous:{title:"Technology Stack",permalink:"/docs/category/technology-stack"},next:{title:"User Permissions",permalink:"/docs/category/user-permissions"}},c={},h=[{value:"Password Encryption",id:"password-encryption",level:2},{value:"Session Management",id:"session-management",level:2},{value:"Additional Security with OTP",id:"additional-security-with-otp",level:2},{value:"OAuth2.0 Integration",id:"oauth20-integration",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"user-authentication",children:"User Authentication"})}),"\n",(0,n.jsx)(t.p,{children:"When a user attempts to log into the system, the provided password is securely transmitted to the backend server for validation. This process is designed to ensure that user credentials remain protected and that unauthorized access is prevented."}),"\n","\n",(0,n.jsx)(t.h2,{id:"password-encryption",children:"Password Encryption"}),"\n",(0,n.jsxs)(t.p,{children:["To enhance security, user passwords are stored in the database using ",(0,n.jsx)(t.strong,{children:"SHA256 encryption"}),". This cryptographic hash function takes the user's password and transforms it into a fixed-length string of characters, which is then saved in the database. During login, the server performs the same SHA256 hashing operation on the input password and compares it with the stored hash. This means that the actual password is never stored or transmitted in plain text, significantly reducing the risk of sensitive information being compromised."]}),"\n",(0,n.jsx)(t.h2,{id:"session-management",children:"Session Management"}),"\n",(0,n.jsxs)(t.p,{children:["The server employs ",(0,n.jsx)(t.strong,{children:"session management"})," to maintain the user's login status throughout their interaction with the application. Once a user is authenticated, a session is created on the server. This session serves as a temporary store of the user's data and login state. Each time the user makes a request to the server, the session is referenced to retrieve the user's information. It\u2019s important to note that ",(0,n.jsx)(t.strong,{children:"user information is not stored on the frontend"}),"; instead, it is dynamically retrieved from the backend as needed. This approach ensures that sensitive user details are kept secure and are not exposed to client-side vulnerabilities."]}),"\n",(0,n.jsx)(t.h2,{id:"additional-security-with-otp",children:"Additional Security with OTP"}),"\n",(0,n.jsxs)(t.p,{children:["For enhanced security, some users may be required to provide a ",(0,n.jsx)(t.strong,{children:"One-Time Password (OTP)"})," when logging into the site. This additional layer of verification is particularly useful for accounts that have elevated permissions or sensitive data access. The OTP is typically sent to the user's registered mobile device or email, ensuring that even if someone has access to the user's password, they would still need the OTP to complete the login process. This method helps in mitigating the risks associated with stolen credentials."]}),"\n",(0,n.jsx)(t.h2,{id:"oauth20-integration",children:"OAuth2.0 Integration"}),"\n",(0,n.jsxs)(t.p,{children:["In addition to traditional login methods, our system supports ",(0,n.jsx)(t.strong,{children:"GitHub OAuth2.0"})," for users who prefer a more streamlined login experience. This Single Sign-On (SSO) feature allows users to authenticate via their GitHub account, eliminating the need to create and manage a separate password for the application. By integrating OAuth2.0, users can benefit from the security and convenience that comes with using an established authentication provider. This means users can log in quickly while still ensuring that their data remains secure."]}),"\n",(0,n.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsx)(t.p,{children:"The authentication mechanism implemented in this application combines robust password encryption, efficient session management, optional OTP verification, and integration with GitHub OAuth2.0 to create a secure and user-friendly login experience. By following best practices in user authentication, we ensure that users can access their accounts safely while keeping their sensitive information protected from unauthorized access."})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var n=s(6540);const i={},r=n.createContext(i);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);